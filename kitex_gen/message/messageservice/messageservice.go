// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "github.com/dzc1997/DouyinSimplifyEdition/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageChat":    kitex.NewMethodInfo(messageChatHandler, newMessageServiceMessageChatArgs, newMessageServiceMessageChatResult, false),
		"RelationAction": kitex.NewMethodInfo(relationActionHandler, newMessageServiceRelationActionArgs, newMessageServiceRelationActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceMessageChatArgs)
	realResult := result.(*message.MessageServiceMessageChatResult)
	success, err := handler.(message.MessageService).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceMessageChatArgs() interface{} {
	return message.NewMessageServiceMessageChatArgs()
}

func newMessageServiceMessageChatResult() interface{} {
	return message.NewMessageServiceMessageChatResult()
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceRelationActionArgs)
	realResult := result.(*message.MessageServiceRelationActionResult)
	success, err := handler.(message.MessageService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceRelationActionArgs() interface{} {
	return message.NewMessageServiceRelationActionArgs()
}

func newMessageServiceRelationActionResult() interface{} {
	return message.NewMessageServiceRelationActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageChat(ctx context.Context, req *message.MessageChatRequest) (r *message.MessageChatResponse, err error) {
	var _args message.MessageServiceMessageChatArgs
	_args.Req = req
	var _result message.MessageServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationAction(ctx context.Context, req *message.RelationActionRequest) (r *message.RelationActionResponse, err error) {
	var _args message.MessageServiceRelationActionArgs
	_args.Req = req
	var _result message.MessageServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
